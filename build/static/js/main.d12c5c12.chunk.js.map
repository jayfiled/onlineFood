{"version":3,"sources":["helpers.js","components/StorePicker.js","components/Header.js","components/Order.js","base.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/NotFound.js","components/Router.js","index.js"],"names":["formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","StorePicker","myInput","React","createRef","goToStore","event","preventDefault","storeName","current","value","props","history","push","Fragment","className","onSubmit","this","type","ref","required","placeholder","defaultValue","Component","Header","tagline","Order","renderOrder","key","fish","fishes","count","order","transitionGroupOptions","classNames","timeout","enter","exit","status","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","total","reduce","prevTotal","map","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","AddFishForm","nameRef","priceRef","statusRef","descRef","imageRef","createFish","e","parseFloat","desc","image","addFish","currentTarget","reset","EditFishForm","handleChange","updatedFish","updateFish","index","onChange","deleteFish","Login","authenticate","Inventory","state","uid","owner","componentDidMount","auth","onAuthStateChanged","user","authHandler","authData","a","async","fetch","storeId","context","store","post","data","setState","console","log","provider","authProvider","signInWithPopup","then","logout","signOut","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","details","isAvailable","src","alt","disabled","addToOrder","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","JSON","parse","syncState","setItem","stringify","removeBinding","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.d12c5c12.chunk.js","sourcesContent":["export function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { getFunName } from \"../helpers\";\r\n\r\nclass StorePicker extends React.Component {\r\n  // 2 ways to bind 'this' to the extended component.\r\n  // In react, you can only reference 'this' within it's built in components, i.e. ComponentDidMount, render() etc.\r\n  // If you want to reference 'this' within your own methods, or functions, you need to do either:\r\n  // 1.\r\n  // constructor() {\r\n  //   super();\r\n  //   this.goToStore = this.goToStore.bind(this);\r\n  //   // and the same for every subsequent method you make\r\n  //   }\r\n  // }\r\n  // //or instead of creating constructor, you make your own function a property that stores an arrow function, like:\r\n\r\n  // Creates a reference object to the currenly selected component\r\n  myInput = React.createRef();\r\n\r\n  goToStore = event => {\r\n    // 1. Stop form from submitting\r\n    event.preventDefault();\r\n    // 2. Get the text from that input - expl = you access the form data from the myInput reference by using 'current' \r\n    const storeName = this.myInput.current.value;\r\n    // 3. Change the page to /store/whatever-they-entered\r\n\r\n    this.props.history.push(`/store/${storeName}`);\r\n  };\r\n  // because 'goToStore' is now a property, it is bound to the instance.\r\n\r\n  // Natural way of writing a method, but within React components, 'this' will be undefined.\r\n  // goToStore(event) {\r\n  //\r\n  //   event.preventDefault();\r\n\r\n  //   console.log(this.myInput);\r\n  // }\r\n\r\n  static propTypes = {\r\n    history: PropTypes.object,\r\n    location: PropTypes.object,\r\n    match: PropTypes.object\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <-- If you don't put the parenthesis, ; is assumed (ASI) and will break\r\n      <React.Fragment>\r\n        {/*<-- Solution to not being able to return sibling elements}*/}\r\n        <form className=\"store-selector\" onSubmit={this.goToStore}>\r\n          <h2>Please enter a store</h2>\r\n          <input\r\n            type=\"text\"\r\n            ref={this.myInput}\r\n            required\r\n            placeholder=\"Store Name\"\r\n            defaultValue={getFunName()}\r\n          />\r\n          <button type=\"submit\">Visit Store ➡ </button>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StorePicker;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { string } from \"prop-types\";\r\n\r\n// Stateless functional component\r\n// ES6 Syntax, returning only 1 line (because we use the parenthesis to make it think it is one line), so return is implicitly defined\r\n//Its a function now (as opposed to a class), so you can remove the reference to 'this'\r\n\r\n// Furthermore, you can detructure the props object argument to only the variables you want to use in your component\r\nconst Header = ({ tagline }) => (\r\n  <header className=\"top\">\r\n    <h1>\r\n      Catch\r\n      <span className=\"ofThe\">\r\n        <span className=\"of\">of</span>\r\n        <span className=\"the\">the</span>\r\n      </span>\r\n      day\r\n    </h1>\r\n    <h3 className=\"tagline\">\r\n      <span>{tagline}</span>\r\n    </h3>\r\n  </header>\r\n);\r\n\r\n// Smart function - use this syntax if you want to use methods, state etc.\r\n\r\n// class Header extends React.Component {\r\n//   render() {\r\n//     return (\r\n//       <header className=\"top\">\r\n//         <h1>\r\n//           Catch\r\n//           <span className=\"ofThe\">\r\n//             <span className=\"of\">of</span>\r\n//             <span className=\"the\">the</span>\r\n//           </span>\r\n//           day\r\n//         </h1>\r\n//         <h3 className=\"tagline\">\r\n//           <span>{this.props.tagline}</span>\r\n//         </h3>\r\n//       </header>\r\n//     );\r\n//   }\r\n// }\r\n\r\nconst propTypes = {\r\n  tagline: PropTypes.string\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { formatPrice } from \"../helpers\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nclass Order extends React.Component {\r\n  static propTypes = {\r\n    fishes: PropTypes.object,\r\n    order: PropTypes.object,\r\n    removeFromOrder: PropTypes.func\r\n  };\r\n  // instead of putting this complexity in the <ul> in the render function, abstract it out to it's own 'render' function like:\r\n\r\n  renderOrder = key => {\r\n    const fish = this.props.fishes[key];\r\n    const count = this.props.order[key];\r\n\r\n    // You can put all these in the CSSTransition component but it's more dry if you just give it an object\r\n\r\n    const transitionGroupOptions = {\r\n      classNames: \"order\",\r\n      key, // <-- key: key,\r\n      timeout: { enter: 500, exit: 500 }\r\n    }; // <-- Don't forget that if you need this is another file, put these options in their own file, and export it, and use named imports.\r\n\r\n    // If fish don't exist in state (like while state is being downloaded from firebase) return nothing.\r\n    if (!fish) return null;\r\n    const isAvailable = fish.status === \"available\";\r\n\r\n    if (!isAvailable) {\r\n      return (\r\n        <CSSTransition {...transitionGroupOptions}>\r\n          {/* <-- delay of when it adds itself to the dom (component mount/unmount), must match css transition duration */}\r\n          <li key={key}>\r\n            Sorry {fish ? fish.name : \"Fish\"} is no longer available'\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    }\r\n    return (\r\n      <CSSTransition {...transitionGroupOptions}>\r\n        <li key={key}>\r\n          <span>\r\n            <TransitionGroup component=\"span\" className=\"count\">\r\n              <CSSTransition\r\n                classNames=\"count\"\r\n                key={count}\r\n                timeout={{ enter: 500, exit: 500 }}\r\n              >\r\n                <span>{count}</span>\r\n              </CSSTransition>\r\n            </TransitionGroup>\r\n            lbs {fish.name}\r\n            {formatPrice(count * fish.price)}\r\n            <button onClick={() => this.props.removeFromOrder(key)}>\r\n              &times;\r\n            </button>\r\n          </span>\r\n        </li>\r\n      </CSSTransition>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    // order = this.props.order;\r\n    // fishes = this.props.fishes;\r\n    const orderIds = Object.keys(this.props.order);\r\n\r\n    const total = orderIds.reduce((prevTotal, key) => {\r\n      const fish = this.props.fishes[key];\r\n      const count = this.props.order[key];\r\n      const isAvailable = fish && fish.status === \"available\";\r\n      if (isAvailable) {\r\n        return prevTotal + count * fish.price;\r\n      }\r\n      return prevTotal;\r\n    }, 0);\r\n\r\n    return (\r\n      <div className=\"order-wrap\">\r\n        <h2>Order</h2>\r\n        <TransitionGroup component=\"ul\" className=\"order\">\r\n          {/* 👆 To animate elements, we replaced the element with a TransitionGroup component and specified which element we replaced} */}\r\n          {/* // The same applies to any child elements you replace, you use the CSSTransition component tags */}\r\n\r\n          {orderIds.map(this.renderOrder)}\r\n        </TransitionGroup>\r\n        {/* {order.keys().map(key => {\r\n            <OrderItem name={key} amount={order[key]} price={fishes[key].price} /> */}\r\n\r\n        <div className=\"total\">\r\n          Total:\r\n          <strong>{formatPrice(total)}</strong>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Order;\r\n","import Rebase from \"re-base\"; // <-- A react pkg for mirroring our state to firebase\r\nimport firebase from \"firebase\"; // <-- firebase's pkg for anything we want to mirror that isn't state.\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  // <-- Firebase app\r\n  apiKey: \"AIzaSyCztz5ig0uj9Hw7lL7JKIp48mLjSH5-kFY\",\r\n  authDomain: \"catch-of-the-day-joel-james.firebaseapp.com\",\r\n  databaseURL: \"https://catch-of-the-day-joel-james.firebaseio.com\"\r\n});\r\n\r\nconst base = Rebase.createClass(firebaseApp.database()); // Rebase bindings\r\n\r\n// This is a named export\r\nexport { firebaseApp };\r\n\r\n// This is the default export\r\nexport default base;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass AddFishForm extends React.Component {\r\n  nameRef = React.createRef();\r\n  priceRef = React.createRef();\r\n  statusRef = React.createRef();\r\n  descRef = React.createRef();\r\n  imageRef = React.createRef();\r\n  \r\n  static propTypes = {\r\n    addFish: PropTypes.func\r\n  }\r\n  \r\n  createFish = e => {\r\n    e.preventDefault();\r\n    const fish = {\r\n      name: this.nameRef.current.value,\r\n      price: parseFloat(this.priceRef.current.value),\r\n      status: this.statusRef.current.value,\r\n      desc: this.descRef.current.value,\r\n      image: this.imageRef.current.value\r\n    };\r\n\r\n    this.props.addFish(fish);\r\n    // Refresh the form (clear the fields)\r\n    e.currentTarget.reset();\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"fish-edit\" onSubmit={this.createFish}>\r\n        <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\" />\r\n        <input\r\n          name=\"price\"\r\n          ref={this.priceRef}\r\n          type=\"text\"\r\n          placeholder=\"Price\"\r\n        />\r\n        <select name=\"status\" ref={this.statusRef}>\r\n          <option value=\"fresh\">Fresh!</option>\r\n          <option value=\"unavailable\">Sold out!</option>\r\n        </select>\r\n        <textarea\r\n          name=\"desc\"\r\n          ref={this.descRef}\r\n          type=\"text\"\r\n          placeholder=\"Desc\"\r\n        />\r\n        <input\r\n          name=\"image\"\r\n          ref={this.imageRef}\r\n          type=\"text\"\r\n          placeholder=\"Image\"\r\n        />\r\n        <button type=\"submit\">➕ Add Fish</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddFishForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass EditFishForm extends React.Component {\r\n  static propTypes = {\r\n    fish: PropTypes.shape({\r\n      name: PropTypes.string,\r\n      price: PropTypes.number,\r\n      status: PropTypes.string,\r\n      desc: PropTypes.string,\r\n      image: PropTypes.string\r\n    }),\r\n    updateFish: PropTypes.func,\r\n    deleteFish: PropTypes.func,\r\n    index: PropTypes.string\r\n  };\r\n\r\n  handleChange = event => {\r\n    // Update the fish\r\n\r\n    // 1. Take a copy of the current fish, spread it, then update the name to a new value (in the copy of the obj)\r\n    let updatedFish = {};\r\n\r\n    if (event.currentTarget.name === \"price\") {\r\n      updatedFish = {\r\n        ...this.props.fish,\r\n        [event.currentTarget.name]: parseFloat(event.currentTarget.value)\r\n      };\r\n    } else {\r\n      updatedFish = {\r\n        ...this.props.fish,\r\n        [event.currentTarget.name]: event.currentTarget.value\r\n      };\r\n    }\r\n\r\n    this.props.updateFish(this.props.index, updatedFish);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"fish-edit\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={this.handleChange}\r\n          value={this.props.fish.name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"price\"\r\n          onChange={this.handleChange}\r\n          value={parseFloat(this.props.fish.price)}\r\n        />\r\n        <select\r\n          type=\"text\"\r\n          name=\"status\"\r\n          onChange={this.handleChange}\r\n          value={this.props.fish.status}\r\n        >\r\n          <option value=\"available\">Fresh!</option>\r\n          <option value=\"unavailable\">Sold Out!</option>\r\n        </select>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"desc\"\r\n          onChange={this.handleChange}\r\n          value={this.props.fish.desc}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"image\"\r\n          onChange={this.handleChange}\r\n          value={this.props.fish.image}\r\n        />\r\n        <button onClick={() => this.props.deleteFish(this.props.index)}>\r\n          Remove fish\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditFishForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Login = (props) => (\r\n  <nav className=\"login\">\r\n    <h2>Inventory Login</h2>\r\n    <p>Sign in to manage your store's inventory</p>\r\n    <button\r\n      className=\"github\"\r\n      onClick={() => props.authenticate(\"Github\")}\r\n    >\r\n      Log in with Github\r\n    </button>\r\n    <button\r\n      className=\"facebook\"\r\n      onClick={() => props.authenticate(\"Facebook\")}\r\n    >\r\n      Log in with Facebook\r\n    </button>\r\n    <button\r\n      className=\"twitter\"\r\n      onClick={() => props.authenticate(\"Twitter\")}\r\n    >\r\n      Log in with Twitter\r\n    </button>\r\n  </nav>\r\n);\r\n\r\nLogin.propTypes = {\r\n    authenticate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport firebase from \"firebase\";\r\nimport base, { firebaseApp } from \"../base\";\r\nimport AddFishForm from \"./AddFishForm\";\r\nimport EditFishForm from \"./EditFishForm\";\r\nimport Login from \"./Login\";\r\n\r\nclass Inventory extends React.Component {\r\n  static propTypes = {\r\n    fishes: PropTypes.object,\r\n    addFish: PropTypes.func,\r\n    updateFish: PropTypes.func,\r\n    deleteFish: PropTypes.func,\r\n    loadSampleFishes: PropTypes.func,\r\n    storeId: PropTypes.string\r\n  };\r\n\r\n  state = {\r\n    uid: null,\r\n    owner: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        this.authHandler({ user} );\r\n      }\r\n    })\r\n  }\r\n\r\n  authHandler = async authData => {\r\n    // 1. Look up the current store in the firebase database\r\n\r\n    const store = await base.fetch(this.props.storeId, { context: this });\r\n    // 2. Claim it if there is no owner\r\n    if (!store.owner) {\r\n      // save it as our own\r\n      await base.post(`${this.props.storeId}/owner`, {\r\n        data: authData.user.uid // could also use email address\r\n      });\r\n    }\r\n    // 3. Set the state of the inventory component to reflect the current user\r\n    this.setState({\r\n      uid: authData.user.uid,\r\n      owner: store.owner || authData.user.uid\r\n    });\r\n\r\n    console.log(store);\r\n    console.log(authData);\r\n  };\r\n\r\n  authenticate = provider => {\r\n    const authProvider = new firebase.auth[`${provider}AuthProvider`]();\r\n    firebase\r\n      .auth()\r\n      .signInWithPopup(authProvider)\r\n      .then(this.authHandler);\r\n  };\r\n\r\n  logout = async () => {\r\n    console.log(\"Logging out!\");\r\n    await firebase.auth().signOut();\r\n    this.setState({ uid: null });\r\n  };\r\n\r\n  render() {\r\n    const logout = <button onClick={this.logout}>Log out!</button>;\r\n\r\n    // 1. check if they are logged in\r\n    if (!this.state.uid) {\r\n      return <Login authenticate={this.authenticate} />;\r\n    }\r\n\r\n    // 2. Check if they the owner of the store\r\n    if (this.state.uid !== this.state.owner) {\r\n      return (\r\n        <div>\r\n          <p>Sorry, you are not the owner!</p>\r\n          {logout}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // 3. They must be the owner, render the inventory\r\n\r\n    return (\r\n      <div>\r\n        <h2>Inventory!</h2>\r\n        {logout}\r\n        {Object.keys(this.props.fishes).map(key => (\r\n          <EditFishForm\r\n            key={key}\r\n            index={key} // <-- Because we need the key in the EditFishForm component to be able to identify which fish to change\r\n            fish={this.props.fishes[key]}\r\n            updateFish={this.props.updateFish}\r\n            deleteFish={this.props.deleteFish}\r\n          />\r\n        ))}\r\n\r\n        <AddFishForm addFish={this.props.addFish} />\r\n        <button onClick={this.props.loadSampleFishes}>\r\n          Load Sample Fishes\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { formatPrice } from \"../helpers\";\r\n\r\nclass Fish extends React.Component {\r\n  handleClick = () => {\r\n    \r\n  };\r\n\r\n  static propTypes = {\r\n      details: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        image: PropTypes.string,\r\n        price: PropTypes.number,\r\n        desc: PropTypes.string,\r\n        status: PropTypes.string\r\n      }),\r\n      addToOrder: PropTypes.func\r\n      } \r\n\r\n  render() {\r\n    const { image, name, price, desc, status } = this.props.details;\r\n    const isAvailable = status === \"available\";\r\n    return (\r\n      <li className=\"menu-fish\">\r\n        <img src={this.props.details.image} alt={this.props.details.name} />\r\n        <h3 className=\"fish-name\">\r\n          {name}\r\n          <span className=\"price\">{formatPrice(price)}</span>\r\n        </h3>\r\n        <p>{desc}</p>\r\n        <button disabled={!isAvailable} onClick={() => this.props.addToOrder(this.props.index)}>\r\n          {isAvailable ? \"Add To Cart\" : \"Sold Out\"}\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fish;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Header from \"./Header\";\r\nimport Order from \"./Order\";\r\nimport Inventory from \"./Inventory\";\r\nimport sampleFishes from \"../sample-fishes\";\r\nimport Fish from \"./Fish\";\r\nimport base from \"../base\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    fishes: {},\r\n    order: {}\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    // Grab the name of the store from the Router props supplied by React router\r\n    const { params } = this.props.match;\r\n\r\n    // if you update local storage with componentWillUpdate, you'll need to reinstate local storage\r\n\r\n    const localStorageRef = localStorage.getItem(params.storeId);\r\n    if (localStorageRef) {\r\n      this.setState({ order: JSON.parse(localStorageRef) });\r\n    }\r\n\r\n    // Keep in mind that our state will effectively be in Firebase now, so it will be downloaded.  So if you are storing orders in local storage\r\n    // and you are bringing it back on page refreshes etc, then you need to wait for our state to come down from firebase, otherwise the\r\n    // props you used in Orders will be undefined when they are rendered.\r\n    this.ref = base.syncState(`${params.storeId}/fishes`, {\r\n      // 👆 suppply the URL to the where the state is, then specify which part of state, 'fishes' in our case.  There are other things in here.\r\n      context: this, // <-- Then supply the options as an object\r\n      state: \"fishes\"\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // If the page refreshes, it go through lifecycle methods again, which will trigger this and state will be wiped, and this will update the\r\n    // state to an empty object, so in componentDidMount, reinstate the state from local storage.\r\n    localStorage.setItem(\r\n      this.props.match.params.storeId,\r\n      JSON.stringify(this.state.order) // <-- Local storage needs to save key:values as strings, not the JS object, so you have to stringify\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    base.removeBinding(this.ref);\r\n  }\r\n\r\n  addFish = fish => {\r\n    // 1. Take a copy of the existing state (to avoid mutating the original object)\r\n    const fishes = { ...this.state.fishes };\r\n    // 2. Add our new fishes to the fishes variable\r\n    fishes[`fish${Date.now()}`] = fish;\r\n    // 3. Set the new fishes object to state\r\n\r\n    // setState only updates the state that's been changed\r\n    this.setState({\r\n      fishes // Same as saying 'fishes: fishes' can also write like this: this.setState({ fishes })\r\n    });\r\n    console.log(\"Adding a fish\");\r\n  };\r\n\r\n  updateFish = (key, updatedFish) => {\r\n    // 1. Take a copy of the fish\r\n    const fishes = { ...this.state.fishes };\r\n\r\n    // 2. Update the copy\r\n    fishes[key] = updatedFish;\r\n\r\n    // 3. Set to state\r\n    this.setState({ fishes });\r\n  };\r\n\r\n  deleteFish = key => {\r\n    const fishes = { ...this.state.fishes };\r\n\r\n    fishes[key] = null; // <-- You could do 'delete fish[key]', but firebase won't update, so this is the way to do it if you use firebase.\r\n\r\n    this.setState({ fishes });\r\n  };\r\n\r\n  loadSampleFishes = () => {\r\n    this.setState({ fishes: sampleFishes });\r\n  };\r\n\r\n  addToOrder = key => {\r\n    // Take a copy of state\r\n    const order = { ...this.state.order };\r\n    // Either add to order or update the number\r\n\r\n    order[key] = order[key] + 1 || 1;\r\n    // Call setState to update our state\r\n    this.setState({ order });\r\n  };\r\n\r\n  removeFromOrder = key => {\r\n    const order = { ...this.state.order };\r\n    delete order[key]; // <-- we are saving our order to local storage, not firebase, so we can use this syntax.\r\n    this.setState({ order });\r\n  };\r\n\r\n  static propTypes = {\r\n    match: PropTypes.object\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"catch-of-the-day\">\r\n        <div className=\"menu\">\r\n          <Header tagline=\"Fresh seafood market\" />\r\n          <ul className=\"list-of-fishes\">\r\n            {Object.keys(this.state.fishes).map(key => (\r\n              <Fish\r\n                key={key}\r\n                index={key} // <--- If you want to use the attributes of the HTML element, you can't use the 'key' as it's reserved for React, make your own instead.\r\n                details={this.state.fishes[key]}\r\n                addToOrder={this.addToOrder}\r\n              />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <Order\r\n          fishes={this.state.fishes}\r\n          order={this.state.order}\r\n          removeFromOrder={this.removeFromOrder}\r\n        />\r\n        {/* <Order {...this.state} /> Not best practice, but if you want to pass in the whole state, do this  */}\r\n        <Inventory\r\n          addFish={this.addFish}\r\n          loadSampleFishes={this.loadSampleFishes}\r\n          fishes={this.state.fishes}\r\n          updateFish={this.updateFish}\r\n          deleteFish={this.deleteFish}\r\n          storeId={this.props.match.params.storeId}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => (\r\n  <div>\r\n    <h1>Not Found!!</h1>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport StorePicker from \"./StorePicker\";\r\nimport App from \"./App\";\r\nimport NotFound from \"./NotFound\";\r\n\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={StorePicker}></Route>\r\n      <Route path=\"/store/:storeId\" component={App}></Route>\r\n      <Route component={NotFound}></Route>\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Router from \"./components/Router\";\r\nimport \"./css/style.css\";\r\n\r\nrender(<Router />, document.querySelector(\"#main\"));\r\n"],"sourceRoot":""}